import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Logger } from '@nestjs/common';
import { Job } from 'bullmq';

@Processor('document')
export class DocumentProcessor extends WorkerHost {
  private readonly logger = new Logger(DocumentProcessor.name);

  async process(job: Job): Promise<any> {
    this.logger.log(`üöÄ D√©but du traitement du job ID: ${job.id}`);
    this.logger.log(`üìã Donn√©es du job: ${JSON.stringify(job.data)}`);

    try {
      // √âtape 1: Initialisation
      await job.updateProgress(10);
      this.logger.log(`‚è≥ √âtape 1/5: Initialisation...`);
      await this.delay(1000);

      // √âtape 2: Validation
      await job.updateProgress(30);
      this.logger.log(`‚úÖ √âtape 2/5: Validation des donn√©es...`);
      await this.delay(1500);

      // √âtape 3: Traitement principal
      await job.updateProgress(60);
      this.logger.log(`‚öôÔ∏è √âtape 3/5: Traitement principal...`);
      await this.delay(2000);

      // √âtape 4: Sauvegarde
      await job.updateProgress(80);
      this.logger.log(`üíæ √âtape 4/5: Sauvegarde...`);
      await this.delay(1000);

      // √âtape 5: Finalisation
      await job.updateProgress(100);
      this.logger.log(`üéâ √âtape 5/5: Finalisation...`);
      await this.delay(500);

      const result = {
        success: true,
        jobId: job.id,
        processedAt: new Date().toISOString(),
        message: 'Job trait√© avec succ√®s',
        data: job.data,
      };

      this.logger.log(`‚úÖ Job ${job.id} termin√© avec succ√®s`);
      return result;
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur lors du traitement du job ${job.id}:`,
        error,
      );
      throw error;
    }
  }

  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
